{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules (default) \u00b6 A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.default Code: https://github.com/DHARPA-Project/kiara Description \u00b6 Kiara is the data orchestration engine driving the DHARPA project application (yet to be named). This repository contains a set of officially supported modules. Development \u00b6 Requirements \u00b6 Python (version >=3.6 -- some make targets only work for Python >=3.7, but kiara itself should work on 3.6) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara python3 -m venv .venv source .venv/bin/activate make init If you use direnv , you can alternatively do: git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara cp .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init Note : you might want to adjust the Python version in .envrc (should not be necessary in most cases though) make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Copyright & license \u00b6 This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Home"},{"location":"#kiara-modules-default","text":"A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.default Code: https://github.com/DHARPA-Project/kiara","title":"kiara modules (default)"},{"location":"#description","text":"Kiara is the data orchestration engine driving the DHARPA project application (yet to be named). This repository contains a set of officially supported modules.","title":"Description"},{"location":"#development","text":"","title":"Development"},{"location":"#requirements","text":"Python (version >=3.6 -- some make targets only work for Python >=3.7, but kiara itself should work on 3.6) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"#prepare-development-environment","text":"If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara python3 -m venv .venv source .venv/bin/activate make init If you use direnv , you can alternatively do: git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara cp .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init Note : you might want to adjust the Python version in .envrc (should not be necessary in most cases though)","title":"Prepare development environment"},{"location":"#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"#copyright-license","text":"This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Copyright &amp; license"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.default/","text":"log \u00b6 Top-level package for kiara_modules.default.","title":"kiara_modules.default"},{"location":"api_reference/kiara_modules.default/#kiara_modules.default.__init__.log","text":"Top-level package for kiara_modules.default.","title":"log"},{"location":"api_reference/kiara_modules.default.defaults/","text":"KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER \u00b6 Marker to indicate the base folder for the kiara_modules_default module. KIARA_MODULES_DEFAULT_RESOURCES_FOLDER \u00b6 Default resources folder for this package.","title":"kiara_modules.default.defaults"},{"location":"api_reference/kiara_modules.default.defaults/#kiara_modules.default.defaults.KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER","text":"Marker to indicate the base folder for the kiara_modules_default module.","title":"KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER"},{"location":"api_reference/kiara_modules.default.defaults/#kiara_modules.default.defaults.KIARA_MODULES_DEFAULT_RESOURCES_FOLDER","text":"Default resources folder for this package.","title":"KIARA_MODULES_DEFAULT_RESOURCES_FOLDER"},{"location":"api_reference/kiara_modules.default.dev/","text":"Modules that are useful for kiara as well as pipeline-development, as well as testing. DummyModule \u00b6 Module that simulates processing, but uses hard-coded outputs as a result. create_input_schema ( self ) \u00b6 The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in default/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore result [ k ] = ValueSchema ( ** v ) return result create_output_schema ( self ) \u00b6 The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in default/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore result [ k ] = ValueSchema ( ** v ) return result process ( self , inputs , outputs ) \u00b6 Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in default/dev.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): v = self . output_schemas [ output_name ] . type_obj . fake_value () value_dict [ output_name ] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict ) DummyProcessingModuleConfig pydantic-model \u00b6 Configuration for the 'dummy' processing module. delay : float pydantic-field \u00b6 The delay in seconds from processing start to when the (dummy) outputs are returned. input_schema : Mapping [ str , Mapping ] pydantic-field required \u00b6 The input schema for this module. output_schema : Mapping [ str , Mapping ] pydantic-field required \u00b6 The output schema for this module. outputs : Mapping [ str , Any ] pydantic-field \u00b6 The (dummy) output for this module.","title":"kiara_modules.default.dev"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule","text":"Module that simulates processing, but uses hard-coded outputs as a result.","title":"DummyModule"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.create_input_schema","text":"The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in default/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore result [ k ] = ValueSchema ( ** v ) return result","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.create_output_schema","text":"The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in default/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore result [ k ] = ValueSchema ( ** v ) return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.process","text":"Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in default/dev.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): v = self . output_schemas [ output_name ] . type_obj . fake_value () value_dict [ output_name ] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict )","title":"process()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig","text":"Configuration for the 'dummy' processing module.","title":"DummyProcessingModuleConfig"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.delay","text":"The delay in seconds from processing start to when the (dummy) outputs are returned.","title":"delay"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.input_schema","text":"The input schema for this module.","title":"input_schema"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.output_schema","text":"The output schema for this module.","title":"output_schema"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.outputs","text":"The (dummy) output for this module.","title":"outputs"},{"location":"api_reference/kiara_modules.default.logic_gates/","text":"AndModule \u00b6 Returns 'True' if both inputs are 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), \"b\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . delay ) # type: ignore outputs . y = inputs . a and inputs . b LogicProcessingModuleConfig pydantic-model \u00b6 Config class for all the 'logic'-related modules. delay : float pydantic-field \u00b6 the delay in seconds from processing start to when the output is returned. NotModule \u00b6 Negates the input. create_input_schema ( self ) \u00b6 The not module only has one input, a boolean that will be negated by the module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), } create_output_schema ( self ) \u00b6 The output of this module is a single boolean, the negated input. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) } process ( self , inputs , outputs ) \u00b6 Negates the input boolean. Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = not inputs . a OrModule \u00b6 Returns 'True' if one of the inputs is 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), \"b\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = inputs . a or inputs . b","title":"kiara_modules.default.logic_gates"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule","text":"Returns 'True' if both inputs are 'True'.","title":"AndModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), \"b\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . delay ) # type: ignore outputs . y = inputs . a and inputs . b","title":"process()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.LogicProcessingModuleConfig","text":"Config class for all the 'logic'-related modules.","title":"LogicProcessingModuleConfig"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.LogicProcessingModuleConfig.delay","text":"the delay in seconds from processing start to when the output is returned.","title":"delay"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule","text":"Negates the input.","title":"NotModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.create_input_schema","text":"The not module only has one input, a boolean that will be negated by the module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.create_output_schema","text":"The output of this module is a single boolean, the negated input. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.process","text":"Negates the input boolean. Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = not inputs . a","title":"process()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule","text":"Returns 'True' if one of the inputs is 'True'.","title":"OrModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"a\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), \"b\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing this input state.\" ), }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: return { \"y\" : ValueSchema ( type = ValueType . boolean , doc = \"A boolean describing the module output state.\" , ) }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = inputs . a or inputs . b","title":"process()"}]}