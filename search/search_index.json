{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kiara modules (default) \u00b6 A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.default Code: https://github.com/DHARPA-Project/kiara_modules.default Description \u00b6 Kiara is the data orchestration engine driving the DHARPA project application (yet to be named). This repository contains a set of officially supported processing modules and pipelines. Development \u00b6 Requirements \u00b6 Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara python3 -m venv .venv source .venv/bin/activate make init If you use direnv , you can alternatively do: git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara cp .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init Note : you might want to adjust the Python version in .envrc (should not be necessary in most cases though) make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Copyright & license \u00b6 This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Home"},{"location":"#kiara-modules-default","text":"A set of commonly used/useful default modules (and pipelines) for Kiara . Documentation: https://dharpa.org/kiara_modules.default Code: https://github.com/DHARPA-Project/kiara_modules.default","title":"kiara modules (default)"},{"location":"#description","text":"Kiara is the data orchestration engine driving the DHARPA project application (yet to be named). This repository contains a set of officially supported processing modules and pipelines.","title":"Description"},{"location":"#development","text":"","title":"Development"},{"location":"#requirements","text":"Python (version >=3.6 -- some make targets only work for Python >=3.7 though) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"#prepare-development-environment","text":"If you only want to work on the modules, and not the core Kiara codebase, follow the instructions below. Otherwise, please check the notes on how to setup a Kiara development environment under (TODO). git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara python3 -m venv .venv source .venv/bin/activate make init If you use direnv , you can alternatively do: git clone https://github.com/DHARPA-Project/kiara_modules.default.git cd kiara cp .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init Note : you might want to adjust the Python version in .envrc (should not be necessary in most cases though)","title":"Prepare development environment"},{"location":"#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) update-dependencies : update development dependencies (mainly the core kiara package from git) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages (under build/site ) serve-docs : serve documentation pages (incl. auto-reload) for getting direct feedback when working on documentation clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"#copyright-license","text":"This project is MPL v2.0 licensed, for the license text please check the LICENSE file in this repository. Copyright (c) 2021 DHARPA project","title":"Copyright &amp; license"},{"location":"modules_list/","text":"Available module types \u00b6 This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. add_nodes_to_network_graph \u00b6 \u256d\u2500 Module: add_nodes_to_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.AddNodesToNetwork\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Add nodes to an existing graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.add_nodes_to_network_graph \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none: \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.graph = inputs.get_value_obj(\"graph\") \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.graph \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.index_column_name \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f and \u00b6 \u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.AndModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.and \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.y = inputs.a and inputs.b \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f augment_network_graph \u00b6 \u256d\u2500 Module: augment_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.AugmentNetworkGra\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Augment an existing graph with node attributes. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.augment_network_graph \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none or not nodes_table_valu\u2026 \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.graph = inputs.get_value_obj(\"graph\") \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.graph \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.index_column_name \u2502 \u2502 if nodes_table_index not in nodes_table_obj.column_n\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Node attribute table does not have a colum\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f create_graph_from_edges_table \u00b6 \u256d\u2500 Module: create_graph_from_edges_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.CreateGraphFromEd\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Create a directed network graph object from tabular data. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.create_graph_from_edges_table \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.CreateGraphConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 graph_type string The type of the graph. If not \u2502 \u2502 specified, a 'graph_type' input \u2502 \u2502 field will be added which will \u2502 \u2502 default to 'directed'. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"graph_type\") is not None: \u2502 \u2502 _graph_type = self.get_config_value(\"graph_type\") \u2502 \u2502 else: \u2502 \u2502 _graph_type = inputs.graph_type \u2502 \u2502 \u2502 \u2502 graph_type = GraphTypesEnum[_graph_type] \u2502 \u2502 \u2502 \u2502 edges_table_value = inputs.get_value_obj(\"edges_tabl\u2026 \u2502 \u2502 edges_table_obj: pyarrow.Table = edges_table_value.g\u2026 \u2502 \u2502 \u2502 \u2502 source_column = inputs.source_column \u2502 \u2502 target_column = inputs.target_column \u2502 \u2502 weight_column = inputs.weight_column \u2502 \u2502 \u2502 \u2502 errors = [] \u2502 \u2502 if source_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(source_column) \u2502 \u2502 if target_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(target_column) \u2502 \u2502 if weight_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(weight_column) \u2502 \u2502 \u2502 \u2502 if errors: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't create network graph, source table m\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 min_table = edges_table_obj.select( \u2502 \u2502 (source_column, target_column, weight_column) \u2502 \u2502 ) \u2502 \u2502 pandas_table = min_table.to_pandas() \u2502 \u2502 \u2502 \u2502 if graph_type != GraphTypesEnum.directed: \u2502 \u2502 raise NotImplementedError(\"Only 'directed' graph\u2026 \u2502 \u2502 graph_cls = nx.DiGraph \u2502 \u2502 \u2502 \u2502 graph: nx.DiGraph = nx.from_pandas_edgelist( \u2502 \u2502 pandas_table, \u2502 \u2502 source_column, \u2502 \u2502 target_column, \u2502 \u2502 edge_attr=True, \u2502 \u2502 create_using=graph_cls, \u2502 \u2502 ) \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f create_table \u00b6 \u256d\u2500 Module: create_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.tabular_data.CreateTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Import table-like data from an item in the data registry. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.create_table \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.tabular_data.CreateTableModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 allow_column_filter boolean Whether to add an \u2502 \u2502 input option to \u2502 \u2502 filter columns. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileModel = inputs.file \u2502 \u2502 \u2502 \u2502 imported_data = csv.read_csv(input_file.path) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_filter\"): \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.select( \u2502 \u2502 self.get_config_value(\"only_columns\") \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.table = imported_data \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f dummy \u00b6 \u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.dev.DummyModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Module that simulates processing, but uses hard-coded \u2502 \u2502 outputs as a result. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.dummy \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.dev.DummyProcessingModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 doc string -- n/a -- \u2502 \u2502 input_schema object The input schema for this \u2502 \u2502 module. \u2502 \u2502 output_schema object The output schema for this \u2502 \u2502 module. \u2502 \u2502 outputs object The (dummy) output for this \u2502 \u2502 module. \u2502 \u2502 delay number The delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 (dummy) outputs are \u2502 \u2502 returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values that are set \u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate processing by w\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.config.get(\"out\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.keys(): \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_name].type_\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_values[outp\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f find_shortest_path \u00b6 \u256d\u2500 Module: find_shortest_path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.FindShortestPathM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Find the shortest path between two nodes in a graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.find_shortest_path \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.FindShortestPathM\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 mode string Whether to calculate one \u2502 \u2502 shortest path for only one pair \u2502 \u2502 ('single-pair'), or use two node \u2502 \u2502 lists as input and select one of \u2502 \u2502 the following strategies: \u2502 \u2502 shortest path for each pair \u2502 \u2502 ('one-to-one'), the shortest \u2502 \u2502 path to all targets \u2502 \u2502 ('one-to-many'), or a matrix of \u2502 \u2502 all possible combinations \u2502 \u2502 ('many-to-many'). \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 mode = self.get_config_value(\"mode\") \u2502 \u2502 if mode != \"single-pair\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.graph \u2502 \u2502 source: typing.Any = inputs.source_node \u2502 \u2502 target: typing.Any = inputs.target_node \u2502 \u2502 \u2502 \u2502 if source not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, source '{sour\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if target not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, target '{targ\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 shortest_path = nx.shortest_path(graph, source=sourc\u2026 \u2502 \u2502 outputs.path = shortest_path \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f graph_properties \u00b6 \u256d\u2500 Module: graph_properties \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.ExtractGraphPrope\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Extract inherent properties of a network graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.graph_properties \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.ExtractGraphPrope\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 find_largest_compon\u2026 boolean Find the largest \u2502 \u2502 component of a \u2502 \u2502 graph. \u2502 \u2502 number_of_nodes boolean Count the number of \u2502 \u2502 nodes. \u2502 \u2502 number_of_edges boolean Count the number of \u2502 \u2502 edges \u2502 \u2502 density boolean Calculate the graph \u2502 \u2502 density. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.graph \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_component\"): \u2502 \u2502 lc_graph = copy.deepcopy(graph) \u2502 \u2502 # largest_component = max(nx.strongly_connected_\u2026 \u2502 \u2502 lc_graph.remove_nodes_from( \u2502 \u2502 list(nx.isolates(lc_graph)) \u2502 \u2502 ) # remove unconnected nodes from graph \u2502 \u2502 lc_density = nx.density(lc_graph) \u2502 \u2502 outputs.set_values( \u2502 \u2502 largest_component=lc_graph, density_largest_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_nodes\"): \u2502 \u2502 outputs.set_values(number_of_nodes=len(graph.nod\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_edges\"): \u2502 \u2502 outputs.set_values(number_of_edges=len(graph.edg\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"density\"): \u2502 \u2502 density = nx.density(graph) \u2502 \u2502 outputs.set_values(density=density) \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f import_local_file \u00b6 \u256d\u2500 Module: import_local_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.data_onboarding.ImportLocalFileMod\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.import_local_file \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.data_onboarding.ImportLocalPathCon\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.path \u2502 \u2502 file_model = FileModel.import_file(path) \u2502 \u2502 outputs.file = file_model \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f import_local_folder \u00b6 \u256d\u2500 Module: import_local_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.data_onboarding.ImportLocalFolderM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.import_local_folder \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.data_onboarding.ImportLocalPathCon\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f not \u00b6 \u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.NotModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Negates the input. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.not \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.y = not inputs.a \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f or \u00b6 \u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.OrModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.or \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 outputs.y = inputs.a or inputs.b \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f prepare_nodes_table_lena \u00b6 \u256d\u2500 Module: prepare_nodes_table_lena \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.scratchpad.PrepareNodesTableLenaMo\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Prepare tabular data so it can be used as a 'nodes_table' \u2502 \u2502 input in the a directed graph module. \u2502 \u2502 \u2502 \u2502 This is a very specific module, only accepting a very \u2502 \u2502 specific data format and as such only suitable as a \u2502 \u2502 proof-of-concept. \u2502 \u2502 Later on, this will be replaced by a more generic module \u2502 \u2502 (or pipeline). \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.prepare_nodes_table_lena \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 t: pyarrow.Table = inputs.table \u2502 \u2502 df = t.to_pandas() \u2502 \u2502 \u2502 \u2502 df1 = df.iloc[:, 0:11] \u2502 \u2502 df1.columns = [ \u2502 \u2502 \"Id\", \u2502 \u2502 \"LabelOrig\", \u2502 \u2502 \"LabelTrans\", \u2502 \u2502 \"Year\", \u2502 \u2502 \"Type\", \u2502 \u2502 \"Language\", \u2502 \u2502 \"City\", \u2502 \u2502 \"CountryOld\", \u2502 \u2502 \"CountryNew\", \u2502 \u2502 \"Latitude\", \u2502 \u2502 \"Longitude\", \u2502 \u2502 ] \u2502 \u2502 df2 = df.iloc[ \u2502 \u2502 :, 11: \u2502 \u2502 ] # This slices the dataframe in half creating a df\u2026 \u2502 \u2502 df2.columns = [ \u2502 \u2502 \"Id\", \u2502 \u2502 \"Year\", \u2502 \u2502 \"LabelOrig\", \u2502 \u2502 \"LabelTrans\", \u2502 \u2502 \"Type\", \u2502 \u2502 \"Language\", \u2502 \u2502 \"City\", \u2502 \u2502 \"CountryOld\", \u2502 \u2502 \"CountryNew\", \u2502 \u2502 \"Latitude\", \u2502 \u2502 \"Longitude\", \u2502 \u2502 ] \u2502 \u2502 extr_nodes = df1.append(df2) \u2502 \u2502 extr_nodes_unique = extr_nodes.drop_duplicates(subse\u2026 \u2502 \u2502 \u2502 \u2502 result = pyarrow.Table.from_pandas(extr_nodes_unique) \u2502 \u2502 outputs.table = result \u2502 \u2502 \u2502 \u2502 outputs.index_column_name = \"Id\" \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included modules"},{"location":"modules_list/#available-module-types","text":"This page contains a list of all available Kiara module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available module types"},{"location":"modules_list/#add_nodes_to_network_graph","text":"\u256d\u2500 Module: add_nodes_to_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.AddNodesToNetwork\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Add nodes to an existing graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.add_nodes_to_network_graph \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none: \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.graph = inputs.get_value_obj(\"graph\") \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.graph \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.index_column_name \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"add_nodes_to_network_graph"},{"location":"modules_list/#and","text":"\u256d\u2500 Module: and \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.AndModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.and \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.delay) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.y = inputs.a and inputs.b \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"and"},{"location":"modules_list/#augment_network_graph","text":"\u256d\u2500 Module: augment_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.AugmentNetworkGra\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Augment an existing graph with node attributes. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.augment_network_graph \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 nodes_table_value = inputs.get_value_obj(\"node_attri\u2026 \u2502 \u2502 \u2502 \u2502 if nodes_table_value.is_none or not nodes_table_valu\u2026 \u2502 \u2502 # we return the graph as is \u2502 \u2502 # we are using the 'get_value_obj' method, becau\u2026 \u2502 \u2502 # actual data at all \u2502 \u2502 outputs.graph = inputs.get_value_obj(\"graph\") \u2502 \u2502 return \u2502 \u2502 \u2502 \u2502 input_graph: Graph = inputs.graph \u2502 \u2502 graph: Graph = copy.deepcopy(input_graph) \u2502 \u2502 \u2502 \u2502 nodes_table_obj: pyarrow.Table = nodes_table_value.g\u2026 \u2502 \u2502 nodes_table_index = inputs.index_column_name \u2502 \u2502 if nodes_table_index not in nodes_table_obj.column_n\u2026 \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Node attribute table does not have a colum\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 attr_dict = ( \u2502 \u2502 nodes_table_obj.to_pandas() \u2502 \u2502 .set_index(nodes_table_index) \u2502 \u2502 .to_dict(\"index\") \u2502 \u2502 .items() \u2502 \u2502 ) \u2502 \u2502 graph.add_nodes_from(attr_dict) \u2502 \u2502 \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"augment_network_graph"},{"location":"modules_list/#create_graph_from_edges_table","text":"\u256d\u2500 Module: create_graph_from_edges_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.CreateGraphFromEd\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Create a directed network graph object from tabular data. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.create_graph_from_edges_table \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.CreateGraphConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 graph_type string The type of the graph. If not \u2502 \u2502 specified, a 'graph_type' input \u2502 \u2502 field will be added which will \u2502 \u2502 default to 'directed'. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"graph_type\") is not None: \u2502 \u2502 _graph_type = self.get_config_value(\"graph_type\") \u2502 \u2502 else: \u2502 \u2502 _graph_type = inputs.graph_type \u2502 \u2502 \u2502 \u2502 graph_type = GraphTypesEnum[_graph_type] \u2502 \u2502 \u2502 \u2502 edges_table_value = inputs.get_value_obj(\"edges_tabl\u2026 \u2502 \u2502 edges_table_obj: pyarrow.Table = edges_table_value.g\u2026 \u2502 \u2502 \u2502 \u2502 source_column = inputs.source_column \u2502 \u2502 target_column = inputs.target_column \u2502 \u2502 weight_column = inputs.weight_column \u2502 \u2502 \u2502 \u2502 errors = [] \u2502 \u2502 if source_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(source_column) \u2502 \u2502 if target_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(target_column) \u2502 \u2502 if weight_column not in edges_table_obj.column_names: \u2502 \u2502 errors.append(weight_column) \u2502 \u2502 \u2502 \u2502 if errors: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't create network graph, source table m\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 min_table = edges_table_obj.select( \u2502 \u2502 (source_column, target_column, weight_column) \u2502 \u2502 ) \u2502 \u2502 pandas_table = min_table.to_pandas() \u2502 \u2502 \u2502 \u2502 if graph_type != GraphTypesEnum.directed: \u2502 \u2502 raise NotImplementedError(\"Only 'directed' graph\u2026 \u2502 \u2502 graph_cls = nx.DiGraph \u2502 \u2502 \u2502 \u2502 graph: nx.DiGraph = nx.from_pandas_edgelist( \u2502 \u2502 pandas_table, \u2502 \u2502 source_column, \u2502 \u2502 target_column, \u2502 \u2502 edge_attr=True, \u2502 \u2502 create_using=graph_cls, \u2502 \u2502 ) \u2502 \u2502 outputs.graph = graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_graph_from_edges_table"},{"location":"modules_list/#create_table","text":"\u256d\u2500 Module: create_table \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.tabular_data.CreateTableModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Import table-like data from an item in the data registry. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.create_table \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.tabular_data.CreateTableModuleConf\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 allow_column_filter boolean Whether to add an \u2502 \u2502 input option to \u2502 \u2502 filter columns. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 input_file: FileModel = inputs.file \u2502 \u2502 \u2502 \u2502 imported_data = csv.read_csv(input_file.path) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"allow_column_filter\"): \u2502 \u2502 if self.get_config_value(\"columns\"): \u2502 \u2502 imported_data = imported_data.select( \u2502 \u2502 self.get_config_value(\"only_columns\") \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 outputs.table = imported_data \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_table"},{"location":"modules_list/#dummy","text":"\u256d\u2500 Module: dummy \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.dev.DummyModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Module that simulates processing, but uses hard-coded \u2502 \u2502 outputs as a result. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.dummy \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.dev.DummyProcessingModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 doc string -- n/a -- \u2502 \u2502 input_schema object The input schema for this \u2502 \u2502 module. \u2502 \u2502 output_schema object The output schema for this \u2502 \u2502 module. \u2502 \u2502 outputs object The (dummy) output for this \u2502 \u2502 module. \u2502 \u2502 delay number The delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 (dummy) outputs are \u2502 \u2502 returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \"\"\"Returns the hardcoded output values that are set \u2026 \u2502 \u2502 \u2502 \u2502 Optionally, this module can simulate processing by w\u2026 \u2502 \u2502 \"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 output_values: typing.Mapping = self.config.get(\"out\u2026 \u2502 \u2502 \u2502 \u2502 value_dict = {} \u2502 \u2502 for output_name in self.output_names: \u2502 \u2502 if output_name not in output_values.keys(): \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 # v = self.output_schemas[output_name].type_\u2026 \u2502 \u2502 # value_dict[output_name] = v \u2502 \u2502 else: \u2502 \u2502 value_dict[output_name] = output_values[outp\u2026 \u2502 \u2502 outputs.set_values(**value_dict) \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"dummy"},{"location":"modules_list/#find_shortest_path","text":"\u256d\u2500 Module: find_shortest_path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.FindShortestPathM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Find the shortest path between two nodes in a graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.find_shortest_path \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.FindShortestPathM\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 mode string Whether to calculate one \u2502 \u2502 shortest path for only one pair \u2502 \u2502 ('single-pair'), or use two node \u2502 \u2502 lists as input and select one of \u2502 \u2502 the following strategies: \u2502 \u2502 shortest path for each pair \u2502 \u2502 ('one-to-one'), the shortest \u2502 \u2502 path to all targets \u2502 \u2502 ('one-to-many'), or a matrix of \u2502 \u2502 all possible combinations \u2502 \u2502 ('many-to-many'). \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 mode = self.get_config_value(\"mode\") \u2502 \u2502 if mode != \"single-pair\": \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.graph \u2502 \u2502 source: typing.Any = inputs.source_node \u2502 \u2502 target: typing.Any = inputs.target_node \u2502 \u2502 \u2502 \u2502 if source not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, source '{sour\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if target not in graph.nodes: \u2502 \u2502 raise KiaraProcessingException( \u2502 \u2502 f\"Can't process shortest path, target '{targ\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 shortest_path = nx.shortest_path(graph, source=sourc\u2026 \u2502 \u2502 outputs.path = shortest_path \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"find_shortest_path"},{"location":"modules_list/#graph_properties","text":"\u256d\u2500 Module: graph_properties \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.network_analysis.ExtractGraphPrope\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Extract inherent properties of a network graph. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.graph_properties \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.network_analysis.ExtractGraphPrope\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 find_largest_compon\u2026 boolean Find the largest \u2502 \u2502 component of a \u2502 \u2502 graph. \u2502 \u2502 number_of_nodes boolean Count the number of \u2502 \u2502 nodes. \u2502 \u2502 number_of_edges boolean Count the number of \u2502 \u2502 edges \u2502 \u2502 density boolean Calculate the graph \u2502 \u2502 density. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 graph: Graph = inputs.graph \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"find_largest_component\"): \u2502 \u2502 lc_graph = copy.deepcopy(graph) \u2502 \u2502 # largest_component = max(nx.strongly_connected_\u2026 \u2502 \u2502 lc_graph.remove_nodes_from( \u2502 \u2502 list(nx.isolates(lc_graph)) \u2502 \u2502 ) # remove unconnected nodes from graph \u2502 \u2502 lc_density = nx.density(lc_graph) \u2502 \u2502 outputs.set_values( \u2502 \u2502 largest_component=lc_graph, density_largest_\u2026 \u2502 \u2502 ) \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_nodes\"): \u2502 \u2502 outputs.set_values(number_of_nodes=len(graph.nod\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"number_of_edges\"): \u2502 \u2502 outputs.set_values(number_of_edges=len(graph.edg\u2026 \u2502 \u2502 \u2502 \u2502 if self.get_config_value(\"density\"): \u2502 \u2502 density = nx.density(graph) \u2502 \u2502 outputs.set_values(density=density) \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"graph_properties"},{"location":"modules_list/#import_local_file","text":"\u256d\u2500 Module: import_local_file \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.data_onboarding.ImportLocalFileMod\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Read a file into the data registry. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.import_local_file \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.data_onboarding.ImportLocalPathCon\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 path = inputs.path \u2502 \u2502 file_model = FileModel.import_file(path) \u2502 \u2502 outputs.file = file_model \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_local_file"},{"location":"modules_list/#import_local_folder","text":"\u256d\u2500 Module: import_local_folder \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.data_onboarding.ImportLocalFolderM\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc -- n/a -- \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.import_local_folder \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.data_onboarding.ImportLocalPathCon\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for \u2502 \u2502 this module. \u2502 \u2502 source_is_immutable boolean Whether the data that \u2502 \u2502 lives in source path \u2502 \u2502 can be relied upon to \u2502 \u2502 not change, and \u2502 \u2502 always be available \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 raise NotImplementedError() \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"import_local_folder"},{"location":"modules_list/#not","text":"\u256d\u2500 Module: not \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.NotModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Negates the input. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.not \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \"\"\"Negates the input boolean.\"\"\" \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 \u2502 \u2502 outputs.y = not inputs.a \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"not"},{"location":"modules_list/#or","text":"\u256d\u2500 Module: or \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.logic_gates.OrModule \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if one of the inputs is 'True'. \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.or \u2502 \u2502 \u2502 \u2502 config class kiara_modules.default.logic_gates.LogicProcessingModuleC\u2026 \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 delay number the delay in seconds from \u2502 \u2502 processing start to when the \u2502 \u2502 output is returned. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 time.sleep(self.config.get(\"delay\")) # type: ignore \u2502 \u2502 outputs.y = inputs.a or inputs.b \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"or"},{"location":"modules_list/#prepare_nodes_table_lena","text":"\u256d\u2500 Module: prepare_nodes_table_lena \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara_modules.default.scratchpad.PrepareNodesTableLenaMo\u2026 \u2502 \u2502 \u2502 \u2502 is pipeline no \u2502 \u2502 \u2502 \u2502 doc Prepare tabular data so it can be used as a 'nodes_table' \u2502 \u2502 input in the a directed graph module. \u2502 \u2502 \u2502 \u2502 This is a very specific module, only accepting a very \u2502 \u2502 specific data format and as such only suitable as a \u2502 \u2502 proof-of-concept. \u2502 \u2502 Later on, this will be replaced by a more generic module \u2502 \u2502 (or pipeline). \u2502 \u2502 \u2502 \u2502 source repo kiara_modules.default.prepare_nodes_table_lena \u2502 \u2502 \u2502 \u2502 config class kiara.config.KiaraModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this module. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src def process(self, inputs: StepInputs, outputs: StepOutpu\u2026 \u2502 \u2502 \u2502 \u2502 t: pyarrow.Table = inputs.table \u2502 \u2502 df = t.to_pandas() \u2502 \u2502 \u2502 \u2502 df1 = df.iloc[:, 0:11] \u2502 \u2502 df1.columns = [ \u2502 \u2502 \"Id\", \u2502 \u2502 \"LabelOrig\", \u2502 \u2502 \"LabelTrans\", \u2502 \u2502 \"Year\", \u2502 \u2502 \"Type\", \u2502 \u2502 \"Language\", \u2502 \u2502 \"City\", \u2502 \u2502 \"CountryOld\", \u2502 \u2502 \"CountryNew\", \u2502 \u2502 \"Latitude\", \u2502 \u2502 \"Longitude\", \u2502 \u2502 ] \u2502 \u2502 df2 = df.iloc[ \u2502 \u2502 :, 11: \u2502 \u2502 ] # This slices the dataframe in half creating a df\u2026 \u2502 \u2502 df2.columns = [ \u2502 \u2502 \"Id\", \u2502 \u2502 \"Year\", \u2502 \u2502 \"LabelOrig\", \u2502 \u2502 \"LabelTrans\", \u2502 \u2502 \"Type\", \u2502 \u2502 \"Language\", \u2502 \u2502 \"City\", \u2502 \u2502 \"CountryOld\", \u2502 \u2502 \"CountryNew\", \u2502 \u2502 \"Latitude\", \u2502 \u2502 \"Longitude\", \u2502 \u2502 ] \u2502 \u2502 extr_nodes = df1.append(df2) \u2502 \u2502 extr_nodes_unique = extr_nodes.drop_duplicates(subse\u2026 \u2502 \u2502 \u2502 \u2502 result = pyarrow.Table.from_pandas(extr_nodes_unique) \u2502 \u2502 outputs.table = result \u2502 \u2502 \u2502 \u2502 outputs.index_column_name = \"Id\" \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"prepare_nodes_table_lena"},{"location":"pipelines_list/","text":"Available pipeline module types \u00b6 This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type. create_network_graph \u00b6 \u256d\u2500 Module: create_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.CreateNetworkGraph \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a network graph from 2 tabular data sets: one that \u2502 \u2502 contains the edges, one that contains node attributes \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_edges_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_nodes_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table \u2502 \u2502 step_id: load_edges_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_edges_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_table \u2502 \u2502 step_id: load_nodes_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_nodes_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_graph_from_edges_table \u2502 \u2502 step_id: create_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 edges_table: \u2502 \u2502 - step_id: load_edges_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: augment_network_graph \u2502 \u2502 step_id: augment_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 graph: \u2502 \u2502 - step_id: create_graph \u2502 \u2502 value_name: graph \u2502 \u2502 sub_value: \u2502 \u2502 node_attributes: \u2502 \u2502 - step_id: load_nodes_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 read_edges_file__path: edges_path \u2502 \u2502 read_nodes_file__path: nodes_path \u2502 \u2502 create_graph__source_column: source_column \u2502 \u2502 create_graph__target_column: target_column \u2502 \u2502 create_graph__weight_column: weight_column \u2502 \u2502 create_graph__graph_type: graph_type \u2502 \u2502 augment_graph__nodes_attributes: nodes_attributes \u2502 \u2502 augment_graph__index_column_name: nodes_table_index \u2502 \u2502 output_aliases: \u2502 \u2502 augment_graph__graph: graph \u2502 \u2502 doc: 'Create a network graph from 2 tabular data sets: o\u2026 \u2502 \u2502 one that contains node attributes' \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: create_network_graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f nand \u00b6 \u256d\u2500 Module: nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nand \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'False' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: and \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 and__a: a \u2502 \u2502 and__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'False' if both inputs are 'True'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nand \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f network_analysis \u00b6 \u256d\u2500 Module: network_analysis \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.NetworkAnalysis \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc First iteration of a network analysis pipeline. This \u2502 \u2502 doesn't do much yet. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: find_shortest_path \u2502 \u2502 step_id: find_shortest_path \u2502 \u2502 module_config: \u2502 \u2502 mode: single-pair \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: graph_properties \u2502 \u2502 step_id: extract_properties \u2502 \u2502 module_config: \u2502 \u2502 density: false \u2502 \u2502 input_links: {} \u2502 \u2502 input_aliases: \u2502 \u2502 find_shortest_path__graph: graph \u2502 \u2502 extract_properties__graph: graph \u2502 \u2502 find_shortest_path__source_node: shortest_path_source_\u2026 \u2502 \u2502 find_shortest_path__target_node: shortest_path_target_\u2026 \u2502 \u2502 output_aliases: \u2502 \u2502 find_shortest_path__path: shortest_path \u2502 \u2502 extract_properties__largest_component: largest_compone\u2026 \u2502 \u2502 extract_properties__density_largest_component: density\u2026 \u2502 \u2502 extract_properties__number_of_nodes: number_of_nodes \u2502 \u2502 extract_properties__number_of_edges: number_of_edges \u2502 \u2502 doc: First iteration of a network analysis pipeline. Thi\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: network_analysis \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f nor \u00b6 \u256d\u2500 Module: nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'False'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'True' if both inputs are 'False'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nor \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f xor \u00b6 \u256d\u2500 Module: xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Xor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if exactly one of it's two inputs is \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: nand \u2502 \u2502 step_id: nand \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 b: \u2502 \u2502 - step_id: nand \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 nand__a: a \u2502 \u2502 nand__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 and__y: y \u2502 \u2502 doc: Returns 'True' if exactly one of it's two inputs is\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: xor \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Included pipelines"},{"location":"pipelines_list/#available-pipeline-module-types","text":"This page contains a list of all available Kiara pipeline module types, and their details. Note The formatting here will be improved later on, for now this should be enough to get the important details of each module type.","title":"Available pipeline module types"},{"location":"pipelines_list/#create_network_graph","text":"\u256d\u2500 Module: create_network_graph \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.CreateNetworkGraph \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Create a network graph from 2 tabular data sets: one that \u2502 \u2502 contains the edges, one that contains node attributes \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_edges_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: import_local_file \u2502 \u2502 step_id: read_nodes_file \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: create_table \u2502 \u2502 step_id: load_edges_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_edges_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_table \u2502 \u2502 step_id: load_nodes_table \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 file: \u2502 \u2502 - step_id: read_nodes_file \u2502 \u2502 value_name: file \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: create_graph_from_edges_table \u2502 \u2502 step_id: create_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 edges_table: \u2502 \u2502 - step_id: load_edges_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 - module_type: augment_network_graph \u2502 \u2502 step_id: augment_graph \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 graph: \u2502 \u2502 - step_id: create_graph \u2502 \u2502 value_name: graph \u2502 \u2502 sub_value: \u2502 \u2502 node_attributes: \u2502 \u2502 - step_id: load_nodes_table \u2502 \u2502 value_name: table \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 read_edges_file__path: edges_path \u2502 \u2502 read_nodes_file__path: nodes_path \u2502 \u2502 create_graph__source_column: source_column \u2502 \u2502 create_graph__target_column: target_column \u2502 \u2502 create_graph__weight_column: weight_column \u2502 \u2502 create_graph__graph_type: graph_type \u2502 \u2502 augment_graph__nodes_attributes: nodes_attributes \u2502 \u2502 augment_graph__index_column_name: nodes_table_index \u2502 \u2502 output_aliases: \u2502 \u2502 augment_graph__graph: graph \u2502 \u2502 doc: 'Create a network graph from 2 tabular data sets: o\u2026 \u2502 \u2502 one that contains node attributes' \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: create_network_graph \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"create_network_graph"},{"location":"pipelines_list/#nand","text":"\u256d\u2500 Module: nand \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nand \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'False' if both inputs are 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: and \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 and__a: a \u2502 \u2502 and__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'False' if both inputs are 'True'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nand \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"nand"},{"location":"pipelines_list/#network_analysis","text":"\u256d\u2500 Module: network_analysis \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.NetworkAnalysis \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc First iteration of a network analysis pipeline. This \u2502 \u2502 doesn't do much yet. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: find_shortest_path \u2502 \u2502 step_id: find_shortest_path \u2502 \u2502 module_config: \u2502 \u2502 mode: single-pair \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: graph_properties \u2502 \u2502 step_id: extract_properties \u2502 \u2502 module_config: \u2502 \u2502 density: false \u2502 \u2502 input_links: {} \u2502 \u2502 input_aliases: \u2502 \u2502 find_shortest_path__graph: graph \u2502 \u2502 extract_properties__graph: graph \u2502 \u2502 find_shortest_path__source_node: shortest_path_source_\u2026 \u2502 \u2502 find_shortest_path__target_node: shortest_path_target_\u2026 \u2502 \u2502 output_aliases: \u2502 \u2502 find_shortest_path__path: shortest_path \u2502 \u2502 extract_properties__largest_component: largest_compone\u2026 \u2502 \u2502 extract_properties__density_largest_component: density\u2026 \u2502 \u2502 extract_properties__number_of_nodes: number_of_nodes \u2502 \u2502 extract_properties__number_of_edges: number_of_edges \u2502 \u2502 doc: First iteration of a network analysis pipeline. Thi\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: network_analysis \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"network_analysis"},{"location":"pipelines_list/#nor","text":"\u256d\u2500 Module: nor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Nor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if both inputs are 'False'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: not \u2502 \u2502 step_id: not \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 not__y: y \u2502 \u2502 doc: Returns 'True' if both inputs are 'False'. \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: nor \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"nor"},{"location":"pipelines_list/#xor","text":"\u256d\u2500 Module: xor \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 class kiara.modules.pipelines.Xor \u2502 \u2502 \u2502 \u2502 is pipeline yes \u2502 \u2502 \u2502 \u2502 doc Returns 'True' if exactly one of it's two inputs is \u2502 \u2502 'True'. \u2502 \u2502 \u2502 \u2502 source repo -- n/a -- \u2502 \u2502 \u2502 \u2502 config class kiara.config.PipelineModuleConfig \u2502 \u2502 \u2502 \u2502 config \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 constants object Value constants for this \u2502 \u2502 module. \u2502 \u2502 steps array A list of steps/modules of \u2502 \u2502 this pipeline, and their \u2502 \u2502 connections. \u2502 \u2502 input_aliases object A map of input aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<input_name> -- \u2502 \u2502 double underscore!) name as \u2502 \u2502 key, and a string (the \u2502 \u2502 resulting workflow input \u2502 \u2502 alias) as value. \u2502 \u2502 output_aliases object A map of output aliases, \u2502 \u2502 with the calculated \u2502 \u2502 (<step_id>__<output_name> \u2502 \u2502 -- double underscore!) name \u2502 \u2502 as key, and a string (the \u2502 \u2502 resulting workflow output \u2502 \u2502 alias) as value. \u2502 \u2502 doc string Documentation about what \u2502 \u2502 the pipeline does. \u2502 \u2502 meta object Metadata for this workflow. \u2502 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 \u2502 \u2502 \u2502 src constants: {} \u2502 \u2502 steps: \u2502 \u2502 - module_type: or \u2502 \u2502 step_id: or \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: nand \u2502 \u2502 step_id: nand \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: {} \u2502 \u2502 - module_type: and \u2502 \u2502 step_id: and \u2502 \u2502 module_config: {} \u2502 \u2502 input_links: \u2502 \u2502 a: \u2502 \u2502 - step_id: or \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 b: \u2502 \u2502 - step_id: nand \u2502 \u2502 value_name: y \u2502 \u2502 sub_value: \u2502 \u2502 input_aliases: \u2502 \u2502 or__a: a \u2502 \u2502 or__b: b \u2502 \u2502 nand__a: a \u2502 \u2502 nand__b: b \u2502 \u2502 output_aliases: \u2502 \u2502 and__y: y \u2502 \u2502 doc: Returns 'True' if exactly one of it's two inputs is\u2026 \u2502 \u2502 meta: {} \u2502 \u2502 module_type_name: xor \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"xor"},{"location":"usage/","text":"Usage \u00b6 TO BE DONE","title":"Usage"},{"location":"usage/#usage","text":"TO BE DONE","title":"Usage"},{"location":"api_reference/kiara_modules.default.data_onboarding/","text":"kiara_modules.default.data_onboarding \u00b6 ImportLocalFileModule \u00b6 Read a file into the data registry. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/data_onboarding.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the file.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/data_onboarding.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file\" : { \"type\" : \"file\" , \"doc\" : \"A representation of the original file content in the kiara data registry.\" , } } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/data_onboarding.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : path = inputs . path file_model = FileModel . import_file ( path ) outputs . file = file_model ImportLocalFolderModule \u00b6 create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/data_onboarding.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the folder.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/data_onboarding.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_bundle\" : { \"type\" : \"file_bundle\" , \"doc\" : \"The collection of files contained in the folder.\" , } } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/data_onboarding.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : raise NotImplementedError () ImportLocalPathConfig pydantic-model \u00b6 source_is_immutable : bool pydantic-field \u00b6 Whether the data that lives in source path can be relied upon to not change, and always be available","title":"\u279c\u2007data_onboarding"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modulesdefaultdata_onboarding","text":"","title":"kiara_modules.default.data_onboarding"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFileModule","text":"Read a file into the data registry.","title":"ImportLocalFileModule"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFileModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/data_onboarding.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the file.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFileModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/data_onboarding.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file\" : { \"type\" : \"file\" , \"doc\" : \"A representation of the original file content in the kiara data registry.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFileModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/data_onboarding.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : path = inputs . path file_model = FileModel . import_file ( path ) outputs . file = file_model","title":"process()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFolderModule","text":"","title":"ImportLocalFolderModule"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFolderModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/data_onboarding.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"path\" : { \"type\" : \"string\" , \"doc\" : \"The path to the folder.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFolderModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/data_onboarding.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"file_bundle\" : { \"type\" : \"file_bundle\" , \"doc\" : \"The collection of files contained in the folder.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalFolderModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/data_onboarding.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : raise NotImplementedError ()","title":"process()"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalPathConfig","text":"","title":"ImportLocalPathConfig"},{"location":"api_reference/kiara_modules.default.data_onboarding/#kiara_modules.default.data_onboarding.ImportLocalPathConfig.source_is_immutable","text":"Whether the data that lives in source path can be relied upon to not change, and always be available","title":"source_is_immutable"},{"location":"api_reference/kiara_modules.default.defaults/","text":"kiara_modules.default.defaults \u00b6 KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER \u00b6 Marker to indicate the base folder for the kiara_modules_default module. KIARA_MODULES_DEFAULT_RESOURCES_FOLDER \u00b6 Default resources folder for this package.","title":"\u279c\u2007defaults"},{"location":"api_reference/kiara_modules.default.defaults/#kiara_modulesdefaultdefaults","text":"","title":"kiara_modules.default.defaults"},{"location":"api_reference/kiara_modules.default.defaults/#kiara_modules.default.defaults.KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER","text":"Marker to indicate the base folder for the kiara_modules_default module.","title":"KIARA_MODULES_DEFAULT_MODULE_BASE_FOLDER"},{"location":"api_reference/kiara_modules.default.defaults/#kiara_modules.default.defaults.KIARA_MODULES_DEFAULT_RESOURCES_FOLDER","text":"Default resources folder for this package.","title":"KIARA_MODULES_DEFAULT_RESOURCES_FOLDER"},{"location":"api_reference/kiara_modules.default.dev/","text":"kiara_modules.default.dev \u00b6 Modules that are useful for kiara as well as pipeline-development, as well as testing. DummyModule \u00b6 Module that simulates processing, but uses hard-coded outputs as a result. create_input_schema ( self ) \u00b6 The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in default/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result create_output_schema ( self ) \u00b6 The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in default/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result process ( self , inputs , outputs ) \u00b6 Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in default/dev.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): raise NotImplementedError () # v = self.output_schemas[output_name].type_obj.fake_value() # value_dict[output_name] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict ) DummyProcessingModuleConfig pydantic-model \u00b6 Configuration for the 'dummy' processing module. delay : float pydantic-field \u00b6 The delay in seconds from processing start to when the (dummy) outputs are returned. input_schema : Mapping [ str , Mapping ] pydantic-field required \u00b6 The input schema for this module. output_schema : Mapping [ str , Mapping ] pydantic-field required \u00b6 The output schema for this module. outputs : Mapping [ str , Any ] pydantic-field \u00b6 The (dummy) output for this module.","title":"\u279c\u2007dev"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modulesdefaultdev","text":"Modules that are useful for kiara as well as pipeline-development, as well as testing.","title":"kiara_modules.default.dev"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule","text":"Module that simulates processing, but uses hard-coded outputs as a result.","title":"DummyModule"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.create_input_schema","text":"The input schema for the dummy module is created at object creation time from the input_schemas config parameter. Source code in default/dev.py def create_input_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The input schema for the ``dummy`` module is created at object creation time from the ``input_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"input_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.create_output_schema","text":"The output schema for the dummy module is created at object creation time from the output_schemas config parameter. Source code in default/dev.py def create_output_schema ( self ) -> typing . Mapping [ str , ValueSchema ]: \"\"\"The output schema for the ``dummy`` module is created at object creation time from the ``output_schemas`` config parameter.\"\"\" result = {} for k , v in self . config . get ( \"output_schema\" ) . items (): # type: ignore schema = ValueSchema ( ** v ) schema . validate_types ( self . _kiara ) result [ k ] = schema return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyModule.process","text":"Returns the hardcoded output values that are set in the outputs config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the delay config parameter). Source code in default/dev.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Returns the hardcoded output values that are set in the ``outputs`` config field. Optionally, this module can simulate processing by waiting a configured amount of time (seconds -- specified in the ``delay`` config parameter). \"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore output_values : typing . Mapping = self . config . get ( \"outputs\" ) # type: ignore value_dict = {} for output_name in self . output_names : if output_name not in output_values . keys (): raise NotImplementedError () # v = self.output_schemas[output_name].type_obj.fake_value() # value_dict[output_name] = v else : value_dict [ output_name ] = output_values [ output_name ] outputs . set_values ( ** value_dict )","title":"process()"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig","text":"Configuration for the 'dummy' processing module.","title":"DummyProcessingModuleConfig"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.delay","text":"The delay in seconds from processing start to when the (dummy) outputs are returned.","title":"delay"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.input_schema","text":"The input schema for this module.","title":"input_schema"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.output_schema","text":"The output schema for this module.","title":"output_schema"},{"location":"api_reference/kiara_modules.default.dev/#kiara_modules.default.dev.DummyProcessingModuleConfig.outputs","text":"The (dummy) output for this module.","title":"outputs"},{"location":"api_reference/kiara_modules.default.logic_gates/","text":"kiara_modules.default.logic_gates \u00b6 AndModule \u00b6 Returns 'True' if both inputs are 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . delay ) # type: ignore outputs . y = inputs . a and inputs . b LogicProcessingModuleConfig pydantic-model \u00b6 Config class for all the 'logic'-related modules. delay : float pydantic-field \u00b6 the delay in seconds from processing start to when the output is returned. NotModule \u00b6 Negates the input. create_input_schema ( self ) \u00b6 The not module only has one input, a boolean that will be negated by the module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" } } create_output_schema ( self ) \u00b6 The output of this module is a single boolean, the negated input. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } } process ( self , inputs , outputs ) \u00b6 Negates the input boolean. Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = not inputs . a OrModule \u00b6 Returns 'True' if one of the inputs is 'True'. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = inputs . a or inputs . b","title":"\u279c\u2007logic_gates"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modulesdefaultlogic_gates","text":"","title":"kiara_modules.default.logic_gates"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule","text":"Returns 'True' if both inputs are 'True'.","title":"AndModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.AndModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . delay ) # type: ignore outputs . y = inputs . a and inputs . b","title":"process()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.LogicProcessingModuleConfig","text":"Config class for all the 'logic'-related modules.","title":"LogicProcessingModuleConfig"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.LogicProcessingModuleConfig.delay","text":"the delay in seconds from processing start to when the output is returned.","title":"delay"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule","text":"Negates the input.","title":"NotModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.create_input_schema","text":"The not module only has one input, a boolean that will be negated by the module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The not module only has one input, a boolean that will be negated by the module.\"\"\" return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" } }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.create_output_schema","text":"The output of this module is a single boolean, the negated input. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: \"\"\"The output of this module is a single boolean, the negated input.\"\"\" return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.NotModule.process","text":"Negates the input boolean. Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : \"\"\"Negates the input boolean.\"\"\" time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = not inputs . a","title":"process()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule","text":"Returns 'True' if one of the inputs is 'True'.","title":"OrModule"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/logic_gates.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"a\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, \"b\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing this input state.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/logic_gates.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"y\" : { \"type\" : \"boolean\" , \"doc\" : \"A boolean describing the module output state.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.logic_gates/#kiara_modules.default.logic_gates.OrModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/logic_gates.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : time . sleep ( self . config . get ( \"delay\" )) # type: ignore outputs . y = inputs . a or inputs . b","title":"process()"},{"location":"api_reference/kiara_modules.default/","text":"kiara_modules.default \u00b6 log \u00b6 Top-level package for kiara_modules.default.","title":"kiara_modules.default"},{"location":"api_reference/kiara_modules.default/#kiara_modulesdefault","text":"","title":"kiara_modules.default"},{"location":"api_reference/kiara_modules.default/#kiara_modules.default.__init__.log","text":"Top-level package for kiara_modules.default.","title":"log"},{"location":"api_reference/kiara_modules.default.network_analysis/","text":"kiara_modules.default.network_analysis \u00b6 AddNodesToNetworkGraphModule \u00b6 Add nodes to an existing graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"nodes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }} process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : nodes_table_value = inputs . get_value_obj ( \"node_attributes\" ) if nodes_table_value . is_none : # we return the graph as is # we are using the 'get_value_obj' method, because there is no need to retrieve the # actual data at all outputs . graph = inputs . get_value_obj ( \"graph\" ) return input_graph : Graph = inputs . graph graph : Graph = copy . deepcopy ( input_graph ) nodes_table_obj : pyarrow . Table = nodes_table_value . get_value_data () nodes_table_index = inputs . index_column_name attr_dict = ( nodes_table_obj . to_pandas () . set_index ( nodes_table_index ) . to_dict ( \"index\" ) . items () ) graph . add_nodes_from ( attr_dict ) outputs . graph = graph AugmentNetworkGraphModule \u00b6 Augment an existing graph with node attributes. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }} process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : nodes_table_value = inputs . get_value_obj ( \"node_attributes\" ) if nodes_table_value . is_none or not nodes_table_value : # we return the graph as is # we are using the 'get_value_obj' method, because there is no need to retrieve the # actual data at all outputs . graph = inputs . get_value_obj ( \"graph\" ) return input_graph : Graph = inputs . graph graph : Graph = copy . deepcopy ( input_graph ) nodes_table_obj : pyarrow . Table = nodes_table_value . get_value_data () nodes_table_index = inputs . index_column_name if nodes_table_index not in nodes_table_obj . column_names : raise KiaraProcessingException ( f \"Node attribute table does not have a column with (index) name ' { nodes_table_index } '. Available column names: { ', ' . join ( nodes_table_obj . column_names ) } \" ) attr_dict = ( nodes_table_obj . to_pandas () . set_index ( nodes_table_index ) . to_dict ( \"index\" ) . items () ) graph . add_nodes_from ( attr_dict ) outputs . graph = graph CreateGraphConfig pydantic-model \u00b6 graph_type : str pydantic-field \u00b6 The type of the graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'. CreateGraphFromEdgesTableModule \u00b6 Create a directed network graph object from tabular data. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"edges_table\" : { \"type\" : \"table\" , \"doc\" : \"The table to extract the edges from.\" , }, \"source_column\" : { \"type\" : \"string\" , \"default\" : \"source\" , \"doc\" : \"The name of the column that contains the edge source in edges table.\" , }, \"target_column\" : { \"type\" : \"string\" , \"default\" : \"target\" , \"doc\" : \"The name of the column that contains the edge target in the edges table.\" , }, \"weight_column\" : { \"type\" : \"string\" , \"default\" : \"weight\" , \"doc\" : \"The name of the column that contains the edge weight in edges table.\" , }, } if self . get_config_value ( \"graph_type\" ) is None : inputs [ \"graph_type\" ] = { \"type\" : \"string\" , \"default\" : \"directed\" , \"doc\" : \"The type of the graph. Allowed: 'undirected', 'directed', 'multi_directed', 'multi_undirected'.\" , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The (networkx) graph object.\" }, } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : if self . get_config_value ( \"graph_type\" ) is not None : _graph_type = self . get_config_value ( \"graph_type\" ) else : _graph_type = inputs . graph_type graph_type = GraphTypesEnum [ _graph_type ] edges_table_value = inputs . get_value_obj ( \"edges_table\" ) edges_table_obj : pyarrow . Table = edges_table_value . get_value_data () source_column = inputs . source_column target_column = inputs . target_column weight_column = inputs . weight_column errors = [] if source_column not in edges_table_obj . column_names : errors . append ( source_column ) if target_column not in edges_table_obj . column_names : errors . append ( target_column ) if weight_column not in edges_table_obj . column_names : errors . append ( weight_column ) if errors : raise KiaraProcessingException ( f \"Can't create network graph, source table missing column(s): { ', ' . join ( errors ) } . Available columns: { ', ' . join ( edges_table_obj . column_names ) } .\" ) min_table = edges_table_obj . select ( ( source_column , target_column , weight_column ) ) pandas_table = min_table . to_pandas () if graph_type != GraphTypesEnum . directed : raise NotImplementedError ( \"Only 'directed' graphs supported at the moment.\" ) graph_cls = nx . DiGraph graph : nx . DiGraph = nx . from_pandas_edgelist ( pandas_table , source_column , target_column , edge_attr = True , create_using = graph_cls , ) outputs . graph = graph ExtractGraphPropertiesModule \u00b6 Extract inherent properties of a network graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } result [ \"density_largest_component\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the largest component.\" , } if self . get_config_value ( \"number_of_nodes\" ): result [ \"number_of_nodes\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of nodes in the graph.\" , } if self . get_config_value ( \"number_of_edges\" ): result [ \"number_of_edges\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of edges in the graph.\" , } if self . get_config_value ( \"density\" ): result [ \"density\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the graph.\" } return result process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : graph : Graph = inputs . graph if self . get_config_value ( \"find_largest_component\" ): lc_graph = copy . deepcopy ( graph ) # largest_component = max(nx.strongly_connected_components_recursive(lc_graph), key=len) lc_graph . remove_nodes_from ( list ( nx . isolates ( lc_graph )) ) # remove unconnected nodes from graph lc_density = nx . density ( lc_graph ) outputs . set_values ( largest_component = lc_graph , density_largest_component = lc_density ) if self . get_config_value ( \"number_of_nodes\" ): outputs . set_values ( number_of_nodes = len ( graph . nodes )) if self . get_config_value ( \"number_of_edges\" ): outputs . set_values ( number_of_edges = len ( graph . edges )) if self . get_config_value ( \"density\" ): density = nx . density ( graph ) outputs . set_values ( density = density ) ExtractGraphPropertiesModuleConfig pydantic-model \u00b6 density : bool pydantic-field \u00b6 Calculate the graph density. find_largest_component : bool pydantic-field \u00b6 Find the largest component of a graph. number_of_edges : bool pydantic-field \u00b6 Count the number of edges number_of_nodes : bool pydantic-field \u00b6 Count the number of nodes. FindShortestPathModule \u00b6 Find the shortest path between two nodes in a graph. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the source node.\" }, \"target_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the target node.\" }, } else : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The id of the source nodes.\" }, \"target_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The id of the target nodes.\" }, } create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"path\" : { \"type\" : \"array\" , \"doc\" : \"The shortest path between two nodes.\" } } else : return { \"paths\" : { \"type\" : \"table\" , \"doc\" : \"A table with 'source', 'target' and 'path' column.\" , } } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : mode = self . get_config_value ( \"mode\" ) if mode != \"single-pair\" : raise NotImplementedError () graph : Graph = inputs . graph source : typing . Any = inputs . source_node target : typing . Any = inputs . target_node if source not in graph . nodes : raise KiaraProcessingException ( f \"Can't process shortest path, source ' { source } ' not in graph.\" ) if target not in graph . nodes : raise KiaraProcessingException ( f \"Can't process shortest path, target ' { target } ' not in graph.\" ) shortest_path = nx . shortest_path ( graph , source = source , target = target ) outputs . path = shortest_path FindShortestPathModuleConfig pydantic-model \u00b6 mode : str pydantic-field \u00b6 Whether to calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many'). GraphTypesEnum \u00b6 An enumeration.","title":"\u279c\u2007network_analysis"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modulesdefaultnetwork_analysis","text":"","title":"kiara_modules.default.network_analysis"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AddNodesToNetworkGraphModule","text":"Add nodes to an existing graph.","title":"AddNodesToNetworkGraphModule"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AddNodesToNetworkGraphModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"nodes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AddNodesToNetworkGraphModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AddNodesToNetworkGraphModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : nodes_table_value = inputs . get_value_obj ( \"node_attributes\" ) if nodes_table_value . is_none : # we return the graph as is # we are using the 'get_value_obj' method, because there is no need to retrieve the # actual data at all outputs . graph = inputs . get_value_obj ( \"graph\" ) return input_graph : Graph = inputs . graph graph : Graph = copy . deepcopy ( input_graph ) nodes_table_obj : pyarrow . Table = nodes_table_value . get_value_data () nodes_table_index = inputs . index_column_name attr_dict = ( nodes_table_obj . to_pandas () . set_index ( nodes_table_index ) . to_dict ( \"index\" ) . items () ) graph . add_nodes_from ( attr_dict ) outputs . graph = graph","title":"process()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AugmentNetworkGraphModule","text":"Augment an existing graph with node attributes.","title":"AugmentNetworkGraphModule"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AugmentNetworkGraphModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"node_attributes\" : { \"type\" : \"table\" , \"doc\" : \"The table containing node attributes.\" , \"optional\" : True , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node index in the node attributes table.\" , \"optional\" : True , }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AugmentNetworkGraphModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.AugmentNetworkGraphModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : nodes_table_value = inputs . get_value_obj ( \"node_attributes\" ) if nodes_table_value . is_none or not nodes_table_value : # we return the graph as is # we are using the 'get_value_obj' method, because there is no need to retrieve the # actual data at all outputs . graph = inputs . get_value_obj ( \"graph\" ) return input_graph : Graph = inputs . graph graph : Graph = copy . deepcopy ( input_graph ) nodes_table_obj : pyarrow . Table = nodes_table_value . get_value_data () nodes_table_index = inputs . index_column_name if nodes_table_index not in nodes_table_obj . column_names : raise KiaraProcessingException ( f \"Node attribute table does not have a column with (index) name ' { nodes_table_index } '. Available column names: { ', ' . join ( nodes_table_obj . column_names ) } \" ) attr_dict = ( nodes_table_obj . to_pandas () . set_index ( nodes_table_index ) . to_dict ( \"index\" ) . items () ) graph . add_nodes_from ( attr_dict ) outputs . graph = graph","title":"process()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphConfig","text":"","title":"CreateGraphConfig"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphConfig.graph_type","text":"The type of the graph. If not specified, a 'graph_type' input field will be added which will default to 'directed'.","title":"graph_type"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphFromEdgesTableModule","text":"Create a directed network graph object from tabular data.","title":"CreateGraphFromEdgesTableModule"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphFromEdgesTableModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"edges_table\" : { \"type\" : \"table\" , \"doc\" : \"The table to extract the edges from.\" , }, \"source_column\" : { \"type\" : \"string\" , \"default\" : \"source\" , \"doc\" : \"The name of the column that contains the edge source in edges table.\" , }, \"target_column\" : { \"type\" : \"string\" , \"default\" : \"target\" , \"doc\" : \"The name of the column that contains the edge target in the edges table.\" , }, \"weight_column\" : { \"type\" : \"string\" , \"default\" : \"weight\" , \"doc\" : \"The name of the column that contains the edge weight in edges table.\" , }, } if self . get_config_value ( \"graph_type\" ) is None : inputs [ \"graph_type\" ] = { \"type\" : \"string\" , \"default\" : \"directed\" , \"doc\" : \"The type of the graph. Allowed: 'undirected', 'directed', 'multi_directed', 'multi_undirected'.\" , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphFromEdgesTableModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The (networkx) graph object.\" }, }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.CreateGraphFromEdgesTableModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : if self . get_config_value ( \"graph_type\" ) is not None : _graph_type = self . get_config_value ( \"graph_type\" ) else : _graph_type = inputs . graph_type graph_type = GraphTypesEnum [ _graph_type ] edges_table_value = inputs . get_value_obj ( \"edges_table\" ) edges_table_obj : pyarrow . Table = edges_table_value . get_value_data () source_column = inputs . source_column target_column = inputs . target_column weight_column = inputs . weight_column errors = [] if source_column not in edges_table_obj . column_names : errors . append ( source_column ) if target_column not in edges_table_obj . column_names : errors . append ( target_column ) if weight_column not in edges_table_obj . column_names : errors . append ( weight_column ) if errors : raise KiaraProcessingException ( f \"Can't create network graph, source table missing column(s): { ', ' . join ( errors ) } . Available columns: { ', ' . join ( edges_table_obj . column_names ) } .\" ) min_table = edges_table_obj . select ( ( source_column , target_column , weight_column ) ) pandas_table = min_table . to_pandas () if graph_type != GraphTypesEnum . directed : raise NotImplementedError ( \"Only 'directed' graphs supported at the moment.\" ) graph_cls = nx . DiGraph graph : nx . DiGraph = nx . from_pandas_edgelist ( pandas_table , source_column , target_column , edge_attr = True , create_using = graph_cls , ) outputs . graph = graph","title":"process()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModule","text":"Extract inherent properties of a network graph.","title":"ExtractGraphPropertiesModule"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: result = {} if self . get_config_value ( \"find_largest_component\" ): result [ \"largest_component\" ] = { \"type\" : \"network_graph\" , \"doc\" : \"A sub-graph of the largest component of the graph.\" , } result [ \"density_largest_component\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the largest component.\" , } if self . get_config_value ( \"number_of_nodes\" ): result [ \"number_of_nodes\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of nodes in the graph.\" , } if self . get_config_value ( \"number_of_edges\" ): result [ \"number_of_edges\" ] = { \"type\" : \"integer\" , \"doc\" : \"The number of edges in the graph.\" , } if self . get_config_value ( \"density\" ): result [ \"density\" ] = { \"type\" : \"float\" , \"doc\" : \"The density of the graph.\" } return result","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : graph : Graph = inputs . graph if self . get_config_value ( \"find_largest_component\" ): lc_graph = copy . deepcopy ( graph ) # largest_component = max(nx.strongly_connected_components_recursive(lc_graph), key=len) lc_graph . remove_nodes_from ( list ( nx . isolates ( lc_graph )) ) # remove unconnected nodes from graph lc_density = nx . density ( lc_graph ) outputs . set_values ( largest_component = lc_graph , density_largest_component = lc_density ) if self . get_config_value ( \"number_of_nodes\" ): outputs . set_values ( number_of_nodes = len ( graph . nodes )) if self . get_config_value ( \"number_of_edges\" ): outputs . set_values ( number_of_edges = len ( graph . edges )) if self . get_config_value ( \"density\" ): density = nx . density ( graph ) outputs . set_values ( density = density )","title":"process()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModuleConfig","text":"","title":"ExtractGraphPropertiesModuleConfig"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModuleConfig.density","text":"Calculate the graph density.","title":"density"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModuleConfig.find_largest_component","text":"Find the largest component of a graph.","title":"find_largest_component"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModuleConfig.number_of_edges","text":"Count the number of edges","title":"number_of_edges"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.ExtractGraphPropertiesModuleConfig.number_of_nodes","text":"Count the number of nodes.","title":"number_of_nodes"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModule","text":"Find the shortest path between two nodes in a graph.","title":"FindShortestPathModule"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/network_analysis.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the source node.\" }, \"target_node\" : { \"type\" : \"any\" , \"doc\" : \"The id of the target node.\" }, } else : return { \"graph\" : { \"type\" : \"network_graph\" , \"doc\" : \"The network graph\" }, \"source_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The id of the source nodes.\" }, \"target_nodes\" : { \"type\" : \"list\" , \"doc\" : \"The id of the target nodes.\" }, }","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/network_analysis.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: mode = self . get_config_value ( \"mode\" ) if mode == \"single-pair\" : return { \"path\" : { \"type\" : \"array\" , \"doc\" : \"The shortest path between two nodes.\" } } else : return { \"paths\" : { \"type\" : \"table\" , \"doc\" : \"A table with 'source', 'target' and 'path' column.\" , } }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/network_analysis.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : mode = self . get_config_value ( \"mode\" ) if mode != \"single-pair\" : raise NotImplementedError () graph : Graph = inputs . graph source : typing . Any = inputs . source_node target : typing . Any = inputs . target_node if source not in graph . nodes : raise KiaraProcessingException ( f \"Can't process shortest path, source ' { source } ' not in graph.\" ) if target not in graph . nodes : raise KiaraProcessingException ( f \"Can't process shortest path, target ' { target } ' not in graph.\" ) shortest_path = nx . shortest_path ( graph , source = source , target = target ) outputs . path = shortest_path","title":"process()"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModuleConfig","text":"","title":"FindShortestPathModuleConfig"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.FindShortestPathModuleConfig.mode","text":"Whether to calculate one shortest path for only one pair ('single-pair'), or use two node lists as input and select one of the following strategies: shortest path for each pair ('one-to-one'), the shortest path to all targets ('one-to-many'), or a matrix of all possible combinations ('many-to-many').","title":"mode"},{"location":"api_reference/kiara_modules.default.network_analysis/#kiara_modules.default.network_analysis.GraphTypesEnum","text":"An enumeration.","title":"GraphTypesEnum"},{"location":"api_reference/kiara_modules.default.scratchpad/","text":"kiara_modules.default.scratchpad \u00b6 PrepareNodesTableLenaModule \u00b6 Prepare tabular data so it can be used as a 'nodes_table' input in the a directed graph module. This is a very specific module, only accepting a very specific data format and as such only suitable as a proof-of-concept. Later on, this will be replaced by a more generic module (or pipeline). create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/scratchpad.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The 'raw' table incl. edges.\" }} create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/scratchpad.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"A normalized table where every row represents the metadata for a single network node.\" , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node identifier.\" , }, } process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/scratchpad.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : t : pyarrow . Table = inputs . table df = t . to_pandas () df1 = df . iloc [:, 0 : 11 ] df1 . columns = [ \"Id\" , \"LabelOrig\" , \"LabelTrans\" , \"Year\" , \"Type\" , \"Language\" , \"City\" , \"CountryOld\" , \"CountryNew\" , \"Latitude\" , \"Longitude\" , ] df2 = df . iloc [ :, 11 : ] # This slices the dataframe in half creating a df of just the TargetJournals data df2 . columns = [ \"Id\" , \"Year\" , \"LabelOrig\" , \"LabelTrans\" , \"Type\" , \"Language\" , \"City\" , \"CountryOld\" , \"CountryNew\" , \"Latitude\" , \"Longitude\" , ] extr_nodes = df1 . append ( df2 ) extr_nodes_unique = extr_nodes . drop_duplicates ( subset = [ \"Id\" ]) result = pyarrow . Table . from_pandas ( extr_nodes_unique ) outputs . table = result outputs . index_column_name = \"Id\"","title":"\u279c\u2007scratchpad"},{"location":"api_reference/kiara_modules.default.scratchpad/#kiara_modulesdefaultscratchpad","text":"","title":"kiara_modules.default.scratchpad"},{"location":"api_reference/kiara_modules.default.scratchpad/#kiara_modules.default.scratchpad.PrepareNodesTableLenaModule","text":"Prepare tabular data so it can be used as a 'nodes_table' input in the a directed graph module. This is a very specific module, only accepting a very specific data format and as such only suitable as a proof-of-concept. Later on, this will be replaced by a more generic module (or pipeline).","title":"PrepareNodesTableLenaModule"},{"location":"api_reference/kiara_modules.default.scratchpad/#kiara_modules.default.scratchpad.PrepareNodesTableLenaModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/scratchpad.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"The 'raw' table incl. edges.\" }}","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.scratchpad/#kiara_modules.default.scratchpad.PrepareNodesTableLenaModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/scratchpad.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"A normalized table where every row represents the metadata for a single network node.\" , }, \"index_column_name\" : { \"type\" : \"string\" , \"doc\" : \"The name of the column that contains the node identifier.\" , }, }","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.scratchpad/#kiara_modules.default.scratchpad.PrepareNodesTableLenaModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/scratchpad.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : t : pyarrow . Table = inputs . table df = t . to_pandas () df1 = df . iloc [:, 0 : 11 ] df1 . columns = [ \"Id\" , \"LabelOrig\" , \"LabelTrans\" , \"Year\" , \"Type\" , \"Language\" , \"City\" , \"CountryOld\" , \"CountryNew\" , \"Latitude\" , \"Longitude\" , ] df2 = df . iloc [ :, 11 : ] # This slices the dataframe in half creating a df of just the TargetJournals data df2 . columns = [ \"Id\" , \"Year\" , \"LabelOrig\" , \"LabelTrans\" , \"Type\" , \"Language\" , \"City\" , \"CountryOld\" , \"CountryNew\" , \"Latitude\" , \"Longitude\" , ] extr_nodes = df1 . append ( df2 ) extr_nodes_unique = extr_nodes . drop_duplicates ( subset = [ \"Id\" ]) result = pyarrow . Table . from_pandas ( extr_nodes_unique ) outputs . table = result outputs . index_column_name = \"Id\"","title":"process()"},{"location":"api_reference/kiara_modules.default.tabular_data/","text":"kiara_modules.default.tabular_data \u00b6 CreateTableModule \u00b6 Import table-like data from an item in the data registry. create_input_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/tabular_data.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains tabular data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs create_output_schema ( self ) \u00b6 Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/tabular_data.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }} process ( self , inputs , outputs ) \u00b6 Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/tabular_data.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : input_file : FileModel = inputs . file imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . table = imported_data CreateTableModuleConfig pydantic-model \u00b6 allow_column_filter : bool pydantic-field \u00b6 Whether to add an input option to filter columns.","title":"\u279c\u2007tabular_data"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modulesdefaulttabular_data","text":"","title":"kiara_modules.default.tabular_data"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModule","text":"Import table-like data from an item in the data registry.","title":"CreateTableModule"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModule.create_input_schema","text":"Abstract method to implement by child classes, returns a description of the input schema of this module. Source code in default/tabular_data.py def create_input_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: inputs = { \"file\" : { \"type\" : \"file\" , \"doc\" : \"The file that contains tabular data.\" , \"optional\" : False , } } if self . get_config_value ( \"allow_column_filter\" ): inputs [ \"columns\" ] = { \"type\" : \"array\" , \"doc\" : \"If provided, only import the columns that match items in this list.\" , \"optional\" : False , } return inputs","title":"create_input_schema()"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModule.create_output_schema","text":"Abstract method to implement by child classes, returns a description of the output schema of this module. Source code in default/tabular_data.py def create_output_schema ( self , ) -> typing . Mapping [ str , typing . Union [ ValueSchema , typing . Mapping [ str , typing . Any ]] ]: return { \"table\" : { \"type\" : \"table\" , \"doc\" : \"the imported table\" }}","title":"create_output_schema()"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModule.process","text":"Abstract method to implement by child classes, should be a pure, idempotent function that uses the values from inputs , and stores results in the provided outputs object. Parameters: Name Type Description Default inputs StepInputs the input value set required outputs StepOutputs the output value set required Source code in default/tabular_data.py def process ( self , inputs : StepInputs , outputs : StepOutputs ) -> None : input_file : FileModel = inputs . file imported_data = csv . read_csv ( input_file . path ) if self . get_config_value ( \"allow_column_filter\" ): if self . get_config_value ( \"columns\" ): imported_data = imported_data . select ( self . get_config_value ( \"only_columns\" ) ) outputs . table = imported_data","title":"process()"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModuleConfig","text":"","title":"CreateTableModuleConfig"},{"location":"api_reference/kiara_modules.default.tabular_data/#kiara_modules.default.tabular_data.CreateTableModuleConfig.allow_column_filter","text":"Whether to add an input option to filter columns.","title":"allow_column_filter"}]}